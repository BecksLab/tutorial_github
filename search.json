[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Using Github for Scientific Collaboration",
    "section": "",
    "text": "Github: a primer\nBefore we start diving into the all the hows it is probably worth understanding why we are interested in using Github. We are probably all to familiar with the challenges that comes with experimenting with or incorporating changes in our work. This often leads to situations where one develops a convoluted file naming process in an attempt of controlling for different the versions of a file that might exist. Git and GitHub provide us with a more structured for of version control that allows for a cleaner and simpler project environment. A good version control system makes it is easy to share files, collaborate on the same project, and have a track record of changes that are made to a specific file.",
    "crumbs": [
      "Github: a primer"
    ]
  },
  {
    "objectID": "index.html#what-is-git-and-github",
    "href": "index.html#what-is-git-and-github",
    "title": "Using Github for Scientific Collaboration",
    "section": "What is Git and GitHub?",
    "text": "What is Git and GitHub?\nOften people equate GitHub with version control, however Github is simply a online, cloud-based tool that uses the software git to store files and track changes, and git is actually the version control system. This means that git is the software that enables version control and it is possible to use other alternative online tools such as GitLab or bitbucket. However, as GitHub is widely used in industry and academia these tutorials will centre around a GitHUb interface (although the core concepts should still be relevant if using other tools).",
    "crumbs": [
      "Github: a primer"
    ]
  },
  {
    "objectID": "index.html#what-can-github-do",
    "href": "index.html#what-can-github-do",
    "title": "Using Github for Scientific Collaboration",
    "section": "What can GitHub do?",
    "text": "What can GitHub do?\nMost often GitHub is associated with programming, however it has uses beyond software development such as:\n\nGitHub can be used to host a webpage\nIssues and discussion can be used for project management\nIt can be used to streamline collaboration and avoid sending around multiple version of a file\n\nEspecially if used in conjunction with reproducible reports\n\nBecause GitHub is cloud-based it can act as a back-up of your work\nGitHub can be used for publishing (but not archiving) code\n\n\n\n\n\n\n\nArchiving\n\n\n\n\nCode\nAn increasing number of journals now expect you to archive the code used in your analyses when you publish a paper. Although it is possible to archive a GitHub repository as read-only it is still better to use read-only file archives, such as figshare or zenodo, as they also have a fixed doi associated with them. Both of these archives will allow you to import code directly from GitHub.\n\n\nData\nGitHub is not optimised for storing or archiving data. It may be possible to store small, unchanging files files there, but large or regularly updated files should be stored in a dedicated data archive such as osf or figshare.",
    "crumbs": [
      "Github: a primer"
    ]
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "1  The basics of GitHub",
    "section": "",
    "text": "1.1 Getting started",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The basics of GitHub</span>"
    ]
  },
  {
    "objectID": "basics.html#getting-started",
    "href": "basics.html#getting-started",
    "title": "1  The basics of GitHub",
    "section": "",
    "text": "1.1.1 Installing Git\n\nfor windows\nfor MacOS\n\n\n\n1.1.2 Setting up\nAuthorisations/configuring got to github\n\n\n1.1.3 Talking to git\n\nLinking with RStudio\nVSCode\nTerminal\n\n\n\n\n\n\n#94: professortocat_v2 © GitHub, Inc.",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The basics of GitHub</span>"
    ]
  },
  {
    "objectID": "basics.html#understanding-the-version-control-workflow",
    "href": "basics.html#understanding-the-version-control-workflow",
    "title": "1  The basics of GitHub",
    "section": "1.2 Understanding the version control workflow",
    "text": "1.2 Understanding the version control workflow\n\n1.2.1 Key terms\nrepo - short for repository repository - the directory or folder that is under version control local - the repository on your computer remote - the repository on GitHub commit - take a snapshot of one or more files in the repository push - send commits from the local repo to the remote repo pull - retrieve commits from the remote repo to the local repo .gitignore a file that tells git which files or types of files you don’t want to commit\nLet’s start by briefly explaining the basic workflow. On GitHub you can make repositories, which is a kind of project. Your online repository, or short repo, is called remote. To use your repository, you need to clone it locally onto your computer and it is then called local. You can write and edit R code locally on your computer. The new code is then committed and pushed back to the remote. If you follow this workflow consistently, GitHub will keep track of all the changes you make.",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The basics of GitHub</span>"
    ]
  },
  {
    "objectID": "basics.html#references",
    "href": "basics.html#references",
    "title": "1  The basics of GitHub",
    "section": "References",
    "text": "References",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The basics of GitHub</span>"
    ]
  },
  {
    "objectID": "branches.html",
    "href": "branches.html",
    "title": "2  Understanding branches",
    "section": "",
    "text": "2.1 Why branches are useful\nKey Terms\nbranch - a space for making changes to code without affecting the original code merge - merge the commits on two branches merge conflict - a problem when there are two incompatible versions of a file that you are trying to merge main - conventional name of the default branch of your repo\nA branch lets you develop code, fix a problem, or test an idea without affecting the original project. A branch is created from an existing branch, usually from the main branch of the project. You can work on a branch, bravely develop code that works or does not work and it does not break the code on the main branch. Basically, you can experiment on your own.",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding branches</span>"
    ]
  },
  {
    "objectID": "branches.html#why-branches-are-useful",
    "href": "branches.html#why-branches-are-useful",
    "title": "2  Understanding branches",
    "section": "",
    "text": "Creating dev versions of your work\nAllow collaborators to make and propose changes (more in next section)\nProvide a space to work on issues/patches\n\n\nNote that main branch was previously named master branch, but removed because of the reference to slavery. Because of this change you might find references to the old name when looking for help elsewhere.",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding branches</span>"
    ]
  },
  {
    "objectID": "branches.html#the-basics-of-branching.",
    "href": "branches.html#the-basics-of-branching.",
    "title": "2  Understanding branches",
    "section": "2.2 The basics of branching.",
    "text": "2.2 The basics of branching.\n\nInsert a nice schematic here",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding branches</span>"
    ]
  },
  {
    "objectID": "branches.html#troubleshooting",
    "href": "branches.html#troubleshooting",
    "title": "2  Understanding branches",
    "section": "2.3 Troubleshooting",
    "text": "2.3 Troubleshooting",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding branches</span>"
    ]
  },
  {
    "objectID": "branches.html#references",
    "href": "branches.html#references",
    "title": "2  Understanding branches",
    "section": "References",
    "text": "References",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding branches</span>"
    ]
  },
  {
    "objectID": "collaborating.html",
    "href": "collaborating.html",
    "title": "3  Collaborating with Github",
    "section": "",
    "text": "3.1 Different ways to collaborate with github\nKey terms\nfork - a copy of a repo on GitHub that is connected to the original pull request - a system for suggesting edits and additions to the owner of the original repo from your fork origin - conventional name for the remote of your fork upstream - conventional name for the remote of the original repo\nGitHub is useful for developing your own code, but at some point you might want to collaborate with other people on a project. Or you might come across a GitHub repository that you want to use as a starting point for your own work. In both cases forks are the way to go.\nIn terms of reviewing and integrating these changes we use a pull request",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  },
  {
    "objectID": "collaborating.html#different-ways-to-collaborate-with-github",
    "href": "collaborating.html#different-ways-to-collaborate-with-github",
    "title": "3  Collaborating with Github",
    "section": "",
    "text": "Branches: as you saw in (previous page) collaborators can create branches and suggest changes\nForks: Forking creates a copy of a repository\n\n\n\n\n\n\n\n#7: Forktocat © GitHub, Inc.",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  },
  {
    "objectID": "collaborating.html#forking-a-repository",
    "href": "collaborating.html#forking-a-repository",
    "title": "3  Collaborating with Github",
    "section": "3.2 Forking a repository",
    "text": "3.2 Forking a repository\nA fork is a copy of somebody’s GitHub repository. You can fork a repo and work independently of the original project. Or if you are collaborating with other people you can stay connected with the original repository via pull requests.\nYou cannot directly affect (or damage) the original project.",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  },
  {
    "objectID": "collaborating.html#creating-pull-requests",
    "href": "collaborating.html#creating-pull-requests",
    "title": "3  Collaborating with Github",
    "section": "3.3 Creating pull requests",
    "text": "3.3 Creating pull requests\n\nThink of this as a ‘track changes’ version of the repository. It is possible to see how the ‘new’ version differs from the current (main) version and you can see what has been added and what has been removed.\nAllows you to suggest/request changes before merging into main",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  },
  {
    "objectID": "collaborating.html#merging-changes",
    "href": "collaborating.html#merging-changes",
    "title": "3  Collaborating with Github",
    "section": "3.4 Merging changes",
    "text": "3.4 Merging changes",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  },
  {
    "objectID": "collaborating.html#a-collaborative-workflow",
    "href": "collaborating.html#a-collaborative-workflow",
    "title": "3  Collaborating with Github",
    "section": "3.5 A collaborative workflow",
    "text": "3.5 A collaborative workflow\n\nInsert basic schematic that links all of the concepts of collaborative work - upstream, changes, pull requests, review",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  },
  {
    "objectID": "collaborating.html#troubleshooting",
    "href": "collaborating.html#troubleshooting",
    "title": "3  Collaborating with Github",
    "section": "3.6 Troubleshooting",
    "text": "3.6 Troubleshooting",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  },
  {
    "objectID": "collaborating.html#references",
    "href": "collaborating.html#references",
    "title": "3  Collaborating with Github",
    "section": "References",
    "text": "References",
    "crumbs": [
      "Gitting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Collaborating with Github</span>"
    ]
  }
]
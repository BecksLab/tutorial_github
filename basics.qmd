# The basics of GitHub

## Getting started

### Installing Git

[Here](https://github.com/git-guides/install-git) is a general guide for installing git for the different operating software.

-   for windows
-   for MacOS
-   for Linux

### Setting up

If you don't already have one create a [GitHub](https://github.com/) account.

::: {.callout-note}
If you are a university student you qualify for a [free pro account](https://education.github.com/pack)
:::

### Talking to git

Now that you have installed `git` you need to link it to your GitHub account and make sure that the two are able to 'talk' to each other. Again there are many ways to set this up. We will discuss some of these approaches below.

#### Linking with RStudio

1.   **Tell RStudio where to find the git programme**: Under the Tools menu, open Global Options and go to the Git/SVN section. Then enable the version control interface and make sure RStudio knows where to find git.  For MacOS, enter the path (which you can find by typing `which git` into your terminal), for Windows, find the git program in your Program Files.
2.   **Configure Git**: The easiest way to do this is in `R` through the {usethis} package (so install that if you don't have it - install.packages("usethis")). and you can just run usethis::use_git_config(user.name="Jane Doe", user.email="jane@example.org") in your R console. Replace with your name and the email that is linked to your GitHub account
3.   **Link your GitHub account**: Now you need to link your GitHub account/credentials. The path of least resistance is going the HTTPS, personal access token (PAT) route. [{usethis}](https://happygitwithr.com/https-pat) package, which outlines how to get a PAT and link that to your git credentials.

#### Linking with VSCode


#### Linking with Terminal


::: {.column-margin}
![#94: professortocat_v2 *© GitHub, Inc.*](assets/octocats/Professortocat_v2.png)
:::

## Understanding the version control workflow

### Key terms

repo - short for repository
repository - the directory or folder that is under version control
local - the repository on your computer
remote - the repository on GitHub
commit - take a snapshot of one or more files in the repository
push - send commits from the local repo to the remote repo
pull - retrieve commits from the remote repo to the local repo
.gitignore a file that tells git which files or types of files you don’t want to commit

Let’s start by briefly explaining the basic workflow. On GitHub you can make repositories, which is a kind of project. Your online repository, or short repo, is called remote. To use your repository, you need to clone it locally onto your computer and it is then called local. You can write and edit R code locally on your computer. The new code is then committed and pushed back to the remote. If you follow this workflow consistently, GitHub will keep track of all the changes you make.

![This is the basic github workflow. First we need to retrieve the remote version of repository. We now have an exact copy of the online repository locally. We are then free to work on and develop the files that are in the repository. Once we have made our changes we need to send these back to the remote repository.](assets/workflows/github_basic.png)

## References {.unnumbered}

::: {#refs}
:::